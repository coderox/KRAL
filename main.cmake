# The project is licensed under GNU GPL v3. See $(PROJECT_ROOT)/docs/gpl-3.0.txt for more details.
#
# KRAL
# Copyright (C) 2015 Cristian Bidea
cmake_minimum_required (VERSION 3.0)
cmake_policy(SET CMP0054 NEW)
macro(kral_init)
    foreach (lib ${CONSTRUCTED_LIBS})
        unset(${lib} CACHE)
    endforeach()
    unset(CONSTRUCTED_LIBS CACHE)
    unset(RUNTIME_TO_COPY CACHE)
    unset(RUNTIME_COPIED CACHE)
endmacro()
kral_init()
include (config)
include (util)

set (SOURCES_EXTENSIONS "*.c;*.cc;*.cpp;*.cxx;*.m;*.mm;*.ui;*.h")
set (INCLUDE_EXTENSIONS "*.h;*.hpp")

function (module PNAME)
    set (GLOBAL_TAB "")
    message(STATUS "Build module: ${PNAME}")
    set (value 1)
    set (BUILD_OPTION "")
    while (value LESS ${ARGC})
        if ("${ARGV${value}}" STREQUAL "DEPENDENCY")
            math (EXPR value "${value} + 1")
            set (DEP_NAME "${ARGV${value}}")	
            math (EXPR value "${value} + 1")
            set (DEP_VER "${ARGV${value}}")	
            list (APPEND ${PNAME}_DEPS "${DEP_NAME}/${DEP_VER}") 
        elseif ("${ARGV${value}}" STREQUAL "MODULE_TYPE")
            math (EXPR value "${value} + 1")
            if ("${BUILD_OPTION}" STREQUAL "")
                set (BUILD_OPTION "${ARGV${value}}")	
            else()
                set (BUILD_OPTION "${BUILD_OPTION} ${ARGV${value}}")	
            endif()
        endif()
        math (EXPR value "${value} + 1")
    endwhile()
    if ("${BUILD_OPTION}" STREQUAL "DISCARD")
        set(BUILD_OPTION "")
    endif()
    list_files(${PNAME})
    add_executable (${PNAME} ${BUILD_OPTION} ${${PNAME}_F_INCLUDE} ${${PNAME}_F_SOURCES} ${${PNAME}_plaf_F_SOURCES})
    set (BUILD_OPTION "")
    set_module_includes(${PNAME})
    build_dependencies(${PNAME})
    append_to_runtime_files(${CMAKE_CURRENT_LIST_DIR}/runtime)	
endfunction()

function (library PNAME)
    set (value 1)
    while (value LESS ${ARGC})
        if ("${ARGV${value}}" STREQUAL "DEPENDENCY")
            math (EXPR value "${value} + 1")
            set (DEP_NAME "${ARGV${value}}")	
            math (EXPR value "${value} + 1")
            set (DEP_VER "${ARGV${value}}")	
            list (APPEND ${PNAME}_DEPS "${DEP_NAME}/${DEP_VER}") 
        elseif ("${ARGV${value}}" STREQUAL "MODULE_TYPE")
            math (EXPR value "${value} + 1")
            if ("${BUILD_OPTION}" STREQUAL "")
                set (BUILD_OPTION "${ARGV${value}}")	
            else()
                set (BUILD_OPTION "${BUILD_OPTION} ${ARGV${value}}")	
            endif()
        endif()
        math (EXPR value "${value} + 1")
    endwhile()
    if ("${BUILD_OPTION}" STREQUAL "DISCARD")
        set(BUILD_OPTION "")
    endif()
    list_files(${PNAME})
    add_library (${PNAME} ${BUILD_OPTION} ${${PNAME}_F_INCLUDE} ${${PNAME}_F_SOURCES} ${${PNAME}_plaf_F_SOURCES})
    set ("${CURRENT_DEPENDENCY}" ${PNAME} CACHE INTERNAL "${CURRENT_DEPENDENCY}" FORCE)
    list(APPEND CONSTRUCTED_LIBS "${CURRENT_DEPENDENCY}")
    set (CONSTRUCTED_LIBS "${CONSTRUCTED_LIBS}" CACHE INTERNAL "CONSTRUCTED_LIBS" FORCE)
    set (BUILD_OPTION "")
    set_module_includes(${PNAME})
    build_dependencies(${PNAME})
    append_to_runtime_files(${CMAKE_CURRENT_LIST_DIR}/runtime)	
endfunction()

# export a framework to be used by those who add this
# package as a dependency
macro (export_ios_framework)
    set (LIF_NAME ${ARGV0})
    if (${ARGC} EQUAL 2)
        set (LIF_SEARCH_PATH "###${ARGV1}")
    endif()
    message (STATUS "${GLOBAL_TAB}export_ios_framework ${LIF_NAME}")
    list (APPEND EXPORTED_IOS_FRAMEWORKS "${LIF_NAME}${LIF_SEARCH_PATH}")
    set (EXPORTED_IOS_FRAMEWORKS "${EXPORTED_IOS_FRAMEWORKS}" PARENT_SCOPE)
endmacro()

# Used to find and link an IOS framework
macro(link_ios_framework)
    set(LIF_PROJ_NAME ${ARGV0})
    set(LIF_NAME ${ARGV1})
    find_library (FRAMEWORK_${LIF_NAME}
                  NAMES ${LIF_NAME}
                  PATHS ${CMAKE_OSX_SYSROOT}/System/Library ~/Library ${ARGV2}
                  PATH_SUFFIXES Frameworks
                  NO_DEFAULT_PATH)
    mark_as_advanced(FRAMEWORK_${LIF_NAME})
    if (${FRAMEWORK_${LIF_NAME}} STREQUAL FRAMEWORK_${LIF_NAME}-NOTFOUND)
        message (ERROR "${GLOBAL_TAB}: Framework ${LIF_NAME} not found")
    else (${FRAMEWORK_${LIF_NAME}} STREQUAL FRAMEWORK_${LIF_NAME}-NOTFOUND)
        target_link_libraries (${LIF_PROJ_NAME} ${FRAMEWORK_${LIF_NAME}})
        get_property(CURRENT_INCLUDES TARGET ${PNAME} PROPERTY INCLUDE_DIRECTORIES)
        set_property(TARGET ${PNAME} PROPERTY INCLUDE_DIRECTORIES "${CURRENT_INCLUDES};${FRAMEWORK_${LIF_NAME}}/Headers") 
        message (STATUS "${GLOBAL_TAB}Framework ${LIF_NAME} found at ${FRAMEWORK_${LIF_NAME}}")
    endif ()
endmacro(link_ios_framework)

# This function is used by packages that don't have sources, only precompiled libs.
macro(export_library NAME)
	MESSAGE (STATUS "Exporting libraries for ${NAME}")
    IF (NOT "${ARGV1}" STREQUAL "")
	    export_all_libraries (${NAME} ${ARGV1})
    ELSE (NOT "${ARGV1}" STREQUAL "")
	    export_all_libraries (${NAME})
    ENDIF (NOT "${ARGV1}" STREQUAL "")
    add_to_link_libs("${${NAME}_LIBS}")
    append_to_runtime_files(${CMAKE_CURRENT_LIST_DIR}/runtime)	
endmacro(export_library)

# This function is used to export all libraries contained in the libs folder
# of the package.
macro(export_all_libraries NAME)
	#todo find a way to abstract the extension of the library
    if (${ARGC} GREATER 2)
        set (POSTFIX "${ARGV1}")
    endif()
	file (GLOB_RECURSE ${NAME}_LIBS "${CMAKE_CURRENT_LIST_DIR}/lib/${PLATFORM}${POSTFIX}/*")

	STRING(REPLACE ";" " " ${NAME}_LIBS "${${NAME}_LIBS}")
	MESSAGE("EXPORT LIB: ${${NAME}_LIBS}")
endmacro(export_all_libraries)

macro (add_to_link_libs LIB)
    set (${CURRENT_DEPENDENCY} "${LIB}" CACHE INTERNAL "${CURRENT_DEPENDENCY}" FORCE)
    list(APPEND CONSTRUCTED_LIBS "${CURRENT_DEPENDENCY}")
    set (CONSTRUCTED_LIBS "${CONSTRUCTED_LIBS}" CACHE INTERNAL "CONSTRUCTED_LIBS" FORCE)
endmacro()

# android generate project doesn't do everything necessary for ndk-gdb to work
# we have to do this manually. This macro should do everything in this regard
# it is in the private interface because it is automatically called from within KRALMain.txt
# the user shouldn't have the need to call it.
macro (generate_ndkgdb_config TARGET)    
    MESSAGE(STATUS "Generating ndk-gdb config...")
    MESSAGE(STATUS "ANDROID_ABI: ${ANDROID_ABI}")
    EXEC_PROGRAM("\"${CMAKE_COMMAND}\" -E make_directory ${CMAKE_BINARY_DIR}/android")
    EXEC_PROGRAM("\"${CMAKE_COMMAND}\" -E make_directory ${CMAKE_BINARY_DIR}/android/obj")
    EXEC_PROGRAM("\"${CMAKE_COMMAND}\" -E make_directory ${CMAKE_BINARY_DIR}/android/obj/local")
    EXEC_PROGRAM("\"${CMAKE_COMMAND}\" -E make_directory ${CMAKE_BINARY_DIR}/android/obj/local/${ANDROID_ABI}")
    EXEC_PROGRAM("\"${CMAKE_COMMAND}\" -E make_directory ${CMAKE_BINARY_DIR}/android/libs")
    EXEC_PROGRAM("\"${CMAKE_COMMAND}\" -E make_directory ${CMAKE_BINARY_DIR}/android/libs/${ANDROID_ABI}")
    EXEC_PROGRAM("\"${CMAKE_COMMAND}\" -E make_directory ${CMAKE_BINARY_DIR}/android/jni")
    FILE (WRITE "${CMAKE_BINARY_DIR}/android/jni/Android.mk" "")

    SET (GDBSETUPFILE "${CMAKE_BINARY_DIR}/android/libs/armeabi/gdb.setup")
    FILE (WRITE "${GDBSETUPFILE}" "set solib-search-path ${CMAKE_BINARY_DIR}/android/obj/local/${ANDROID_ABI}\n")
    FILE (APPEND "${GDBSETUPFILE}" "source $ENV{NDK}/prebuilt/common/gdb/common.setup\n")
    FILE (APPEND "${GDBSETUPFILE}" "directory $ENV{NDK}/platforms/${ANDROID_API_LEVEL}/arch-arm/usr/include ${SOURCE_LOCATIONS}\n")

    if (NOT EXISTS ${CMAKE_BINARY_DIR}/android/libs/armeabi/ )
        EXEC_PROGRAM("\"${CMAKE_COMMAND}\" -E make_directory ${CMAKE_BINARY_DIR}/android/libs/armeabi")
    endif()
    EXEC_PROGRAM("\"${CMAKE_COMMAND}\" -E copy $ENV{NDK}/prebuilt/android-arm/gdbserver/gdbserver ${CMAKE_BINARY_DIR}/android/libs/armeabi")
    if (NOT "${ANDROID_ABI}" STREQUAL "armeabi")
        if (NOT EXISTS ${CMAKE_BINARY_DIR}/android/libs/${ANDROID_ABI}/ )
            EXEC_PROGRAM("\"${CMAKE_COMMAND}\" -E make_directory ${CMAKE_BINARY_DIR}/android/libs/${ANDROID_ABI}")
        endif()
        EXEC_PROGRAM("\"${CMAKE_COMMAND}\" -E copy $ENV{NDK}/prebuilt/android-arm/gdbserver/gdbserver ${CMAKE_BINARY_DIR}/android/libs/${ANDROID_ABI}")
    endif ()
    ADD_CUSTOM_COMMAND(TARGET ${TARGET}
                       POST_BUILD
                       COMMAND "${CMAKE_COMMAND}" ARGS "-E" "copy_directory" "${CMAKE_CURRENT_LIST_DIR}/libs" "${CMAKE_BINARY_DIR}/android/obj/local"
                       COMMAND "${CMAKE_COMMAND}" ARGS "-E" "copy_directory" "${CMAKE_BINARY_DIR}/android/libs" "${CMAKE_BINARY_DIR}/android/obj/local")
endmacro (generate_ndkgdb_config)
